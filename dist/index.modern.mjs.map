{"version":3,"file":"index.modern.mjs","sources":["../src/components/DataViewer.js","../src/components/DataEditor.js"],"sourcesContent":["/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport React, {useState, Fragment} from 'react';\r\nimport {cellEdit, updateTableRows, scrollTable} from '@sassoftware/restafedit';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction DataViewer (props) {\r\n    const {appEnv, editor}   = props;\r\n    const [modFlag, setModFlag] = useState(true);\r\n    const [status, setStatus] = useState(null);\r\n\r\n    const _handleErrors = (err) => {\r\n        setStatus({status: 2, msg: err});\r\n    };\r\n\r\n    // scroll based on pagination data from previous fetch\r\n    const _onScroll = (direction) => {\r\n        scrollTable (direction, appEnv) \r\n            .then (r => {\r\n                setModFlag(!modFlag); \r\n                setStatus({status: 0, msg: null});\r\n            })\r\n            .catch(err => {\r\n                _handleErrors(err);\r\n            });\r\n    };\r\n\r\n    const _onEdit = (name, value, rowIndex, data) => {\r\n        cellEdit (name, value, rowIndex, data, appEnv)\r\n         .then (r => {\r\n            setModFlag(!modFlag); \r\n            setStatus(null);\r\n         })\r\n         .catch(err => {\r\n            _handleErrors(err);\r\n            setStatus(err);\r\n        });\r\n         \r\n    };\r\n\r\n    // Save only modified rows\r\n    // TBD: propagate messages to UI app\r\n    const _onSave = (result) => {\r\n        updateTableRows(result, appEnv)\r\n            .then((r) => {\r\n                setStatus({status: 0, msg: r});\r\n            })\r\n            .catch((err) => setStatus({status: 2, msg: err}));\r\n    };\r\n    debugger;\r\n    const V = editor();\r\n    debugger;\r\n    return (\r\n        <Fragment>\r\n            <V \r\n             onEdit={_onEdit}\r\n             onScroll={_onScroll}\r\n             onSave={_onSave}\r\n             status={status}\r\n             appEnv={appEnv}\r\n             />\r\n        </Fragment>\r\n        );\r\n}\r\nDataViewer.propTypes = {\r\n    /** Application control */\r\n    appEnv: PropTypes.object.isRequired,\r\n    /** user's component for editing     */\r\n    editor: PropTypes.func.isRequired\r\n\r\n};\r\nexport default DataViewer;\r\n","/* eslint-disable no-throw-literal */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport React, { useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {setup, scrollTable} from '@sassoftware/restafedit';\r\nimport DataViewer from './DataViewer';\r\n\r\nfunction DataEditor (props) {\r\n    debugger;\r\n    const { viyaConnection, appControl, editor} = props;\r\n    const [state, setState] = useState({});\r\n\r\n    //\r\n    // Keeping it simple - convert to suspense, lazy etc at some point\r\n    //\r\n    const initialize = async () => {\r\n        debugger;\r\n        let r = await setup(viyaConnection, appControl);\r\n        await scrollTable('first', r);\r\n        return r;\r\n    };\r\n\r\n    useEffect(() => {\r\n        initialize()\r\n            .then((r) => {\r\n                setState(r);\r\n            })\r\n            .catch((err) => {\r\n                throw new Error (JSON.stringify(err));\r\n            });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    let show = null;\r\n    if (state.session != null) {\r\n        show =\r\n            <div id=\"page-wrap\" key={Date()}>\r\n                <DataViewer appEnv={state} \r\n                 editor={editor} />\r\n            </div>;\r\n    }\r\n    return show;\r\n}\r\nDataEditor.propTypes = {\r\n    /** Information to setup connection to Viya */\r\n    viyaConnection: PropTypes.object.isRequired,\r\n\r\n    /** Information to setup application */\r\n    appControl: PropTypes.object.isRequired,\r\n\r\n    /** user's component for editing     */\r\n    editor: PropTypes.func.isRequired\r\n\r\n};\r\nexport default DataEditor;\r\n"],"names":["props","appEnv","editor","modFlag","setModFlag","useState","status","setStatus","_handleErrors","err","msg","V","React","createElement","Fragment","onEdit","name","value","rowIndex","data","cellEdit","then","r","catch","onScroll","direction","scrollTable","onSave","result","updateTableRows","DataEditor","viyaConnection","appControl","state","setState","useEffect","async","setup","initialize","JSON","stringify","show","session","id","key","Date","DataViewer","propTypes","PropTypes","object","isRequired","func"],"mappings":"+LASA,WAAqBA,GACjB,MAAMC,OAACA,EAADC,OAASA,GAAYF,GACpBG,EAASC,GAAcC,GAAS,IAChCC,EAAQC,GAAaF,EAAS,MAElBG,EAAIC,IACnBF,EAAU,CAACD,OAAQ,EAAGI,IAAKD,GAAlB,EAsCNE,EAAGT,iBAEV,OACIU,EAAAC,cAACC,EACG,kBAAAF,EAAAC,cAACF,EAAD,CACCI,OA5BO,CAACC,EAAMC,EAAOC,EAAUC,KACpCC,EAAUJ,EAAMC,EAAOC,EAAUC,EAAMlB,GACrCoB,KAAMC,IACJlB,GAAYD,GACZI,EAAU,KAAD,GAEXgB,MAAMd,IACJD,EAAcC,GACdF,EAAUE,EACb,IAoBIe,SAxCUC,IACfC,EAAaD,EAAWxB,GACnBoB,KAAMC,IACHlB,GAAYD,GACZI,EAAU,CAACD,OAAQ,EAAGI,IAAK,MAC9B,GACAa,MAAMd,IACHD,EAAcC,IANtB,EAwCKkB,OAfQC,IACbC,EAAgBD,EAAQ3B,GACnBoB,KAAMC,IACHf,EAAU,CAACD,OAAQ,EAAGI,IAAKY,GAAlB,GAEZC,MAAOd,GAAQF,EAAU,CAACD,OAAQ,EAAGI,IAAKD,IAClD,EAUQH,OAAQA,EACRL,OAAQA,IAIpB,CCvDD,SAAA6B,EAAqB9B,GAEjB,MAAM+B,eAAEA,EAAFC,WAAkBA,EAAlB9B,OAA8BA,GAAUF,GACvCiC,EAAOC,GAAY7B,EAAS,IAYnC8B,EAAU,KAPSC,WAEf,IAAKd,QAAce,EAACN,EAAgBC,GAEpC,aADMN,EAAY,QAASJ,GAE9BA,GAGGgB,GACKjB,KAAMC,IACHY,EAASZ,EACZ,GACAC,MAAOd,IACJ,MAAM,UAAW8B,KAAKC,UAAU/B,GAA1B,EALd,EAQD,IAEH,IAAIgC,EAAO,KAQX,OAPqB,MAAjBR,EAAMS,UACND,eACI7B,EAAKC,cAAA,MAAA,CAAA8B,GAAG,YAAYC,IAAKC,qBACrBjC,EAACC,cAAAiC,GAAW7C,OAAQgC,EACnB/B,OAAQA,OAIxB,CDqBD4C,EAAWC,UAAY,CAEnB9C,OAAQ+C,EAAUC,OAAOC,WAEzBhD,OAAQ8C,EAAUG,KAAKD,YCxB3BpB,EAAWiB,UAAY,CAEnBhB,eAAgBiB,EAAUC,OAAOC,WAGjClB,WAAYgB,EAAUC,OAAOC,WAG7BhD,OAAQ8C,EAAUG,KAAKD"}