/* eslint-disable no-unused-vars */
/*
 * Copyright Â© 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import React from "react";
import  { useState, useEffect, useContext, useRef } from 'react'; 
import slsExecute from '../lib/slsExecute';
// import {AppContext} from '../providers';
import ShowSelectors from '../helpers/ShowSelectors';
import EditScenario from '../helpers/EditScenario';
import ShowScore from '../helpers/ShowScore';

import { ServerStyleSheets } from '@material-ui/styles';
import Grid from '@material-ui/core/Grid'

function AstoreScoring(props) {

  // const appContext = useContext(AppContext);

  /*
  let appEnv = appContext.viya.appEnv;
  let store = appContext.store;
  debugger;
  */
  
 
  /*
   * planned process;
   * Initialize the selectors based on incoming filter
   * When user selects some condition and says describe retrieve the default values into scenario
   * When user says score - run the scenario and load result into scenarioResult
  
  */


  const [initialValues, setInitialValues] = useState(null);
  const [scenarioResult, setScenarioResult] = useState(null);
  const [modelName, setModelName] = useState(props.model.name);

  let {store, model} = props;
  // const [scenarios, setScenarioValues] = useState(null)
  const [errors, setErrors] = useState('loading...');

  debugger;

  const lastModel = useRef(null);

  useEffect(() => {
      lastModel.current = props.model.name;
  });


  // get initial values
  useEffect(() => {
  
    // get list of states and years - currently no refresh

    debugger;
   
    // setSelectedValues(null);
    setInitialValues(null);
    setScenarioResult(null);

    setErrors('...Retrieving model information');
    slsExecute('describe', store, model, {})
      .then(casResults => {
        setErrors(null);
        setInitialValues(casResults);
        setScenarioResult(null);
        debugger;
      })
      .catch(err => {
        debugger;
        setErrors(JSON.stringify(err));
      });

  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [modelName, props.model]);

  function describeData(casResults) {
    let oldrow = casResults;
    let describe ={};
    for ( let k in casResults) {
      let kl= k.toLowerCase();
      describe[kl] = oldrow[k];
    };

    let editRow = {};
    model.explainVars.forEach(k =>  {
      editRow[k] = describe[k];
    });

    return {describe: describe, editRow: editRow} 
  }

  const getNewValues = (newValues) => {
    let scenario = {...initialValues.describe, ...newValues};
    console.log(scenario);
    setErrors('...Running');
    setScenarioResult(null);
    debugger;
    slsExecute('score', store, model, {scenario: scenario})
    .then(casResults => {
      let score = casResults[0][model.scoreColumn];
      console.log(score);
      setScenarioResult(score);
      setErrors(null);
      debugger;
    })
    .catch(err => {
      debugger;
      setErrors(JSON.stringify(err));
    });
  }
  let show =
  <Grid container spacing={2} >
    <Grid item xs={12}>
      <Grid container justify="center" spacing={2}>
        <Grid key={1} item>
          <ShowSelectors selectors={selectorValues}  selectedValues={selectedValues}
                        handleChange={handleChange} onSubmit={onDescribe}/>
          {errors}
         
        </Grid>
        {(initialValues !==null) ? 
           <Grid key={2} item>
              <EditScenario data={initialValues.editRow} setScenario={getNewValues} />
          </Grid> : null }
        {( scenarioResult !== null) ? 
           <Grid key={3} item>
             <ShowScore model={model} score={scenarioResult}/>
            </Grid> : null }
      </Grid>
    </Grid>
  </Grid>

  return show;
}

export default AstoreScoring;